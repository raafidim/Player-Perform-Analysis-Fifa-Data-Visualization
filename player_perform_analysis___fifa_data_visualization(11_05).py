# -*- coding: utf-8 -*-
"""Player Perform Analysis | Fifa Data Visualization(11/05).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pUi5ld-BoCi6aZzkMNCKXFqxQ4Vi_sNl

# **Importing the Libraries**
"""

import numpy as np # basic operation
import pandas as pd # dataframe menipulation
import matplotlib.pyplot as plt # data visualizations
plt.style.use('fivethirtyeight')# background style for the plots
import seaborn as sns # data visualizations
import missingno as mno # for missing value
import datetime # data time manipulation
import ipywidgets as widgets # interactivity
import ipywidgets as interact
import ipywidgets as interact_manual
from google.colab import drive # for google drive

"""# **Importing Dataset**"""

# Commented out IPython magic to ensure Python compatibility.
# Import data
# %time data = pd.read_csv('data-1.csv')

# Check the shape of the dataset
data.shape

"""# **Describe Dataset**"""

# Understanding each variables
data.info()

# Checking the first 5 raws and column
pd.set_option('max_columns', 100)
data.head()

# Statistical summary of variables with numerical value
pd.set_option('max_columns', 100)
data.iloc[:,2:].describe()

# Check the descriptive statistics for the categorical column
data.iloc[:, 13:].describe(include= 'object')

"""# **Cleaning Data**

### **Check Duplicate Data**
"""

#Drop duplicate value
data = data.drop_duplicates()

data.shape

"""### **Checking Missing Value**"""

# Visualize missing values as a matrix 
mno.bar(data.iloc[:, :40],
        color = 'blue', 
        sort = 'ascending') ## specify the colours blue is not missing.

plt.title('Checking Missing Values Heat Map', fontsize = 20)
plt.show()

# Visualize missing values as a matrix 
mno.bar(data.iloc[:, 40:]) 
plt.title('Checking Missing Values Heat Map')
plt.show()

pd.set_option('max_rows', 100)
data.isnull().sum()

Missing_Percentage = (data.isnull().sum()).sum()/np.product(data.shape)*100
print("The number of missing entries before cleaning: " + str(round(Missing_Percentage,5)) + " %")

"""### **Missing Value Imputation**"""

data.dtypes

# Filling the missing value for the continous variables for proper data visualization

# Mean function add to repl ace missing values from categorical columns
data['ShortPassing'].fillna(data['ShortPassing'].mean(), inplace = True)
data['Volleys'].fillna(data['Volleys'].mean(), inplace = True)
data['Dribbling'].fillna(data['Dribbling'].mean(), inplace = True)
data['Curve'].fillna(data['Curve'].mean(), inplace = True)
data['FKAccuracy'].fillna(data['FKAccuracy'].mean(), inplace = True)
data['LongPassing'].fillna(data['LongPassing'].mean(), inplace = True)
data['BallControl'].fillna(data['BallControl'].mean(), inplace = True)
data['HeadingAccuracy'].fillna(data['HeadingAccuracy'].mean(), inplace = True)
data['Finishing'].fillna(data['Finishing'].mean(), inplace = True)
data['Crossing'].fillna(data['Crossing'].mean(), inplace = True)

data['Weight'].fillna('200lbs', inplace = True)
data['Contract Valid Until'].fillna(2019, inplace = True)
data['Height'].fillna("5'11", inplace = True)
data['Loaned From'].fillna('None', inplace = True)
data['Joined'].fillna('Jul 1, 2018', inplace = True)
data['Jersey Number'].fillna(8, inplace = True)
data['Body Type'].fillna('Normal', inplace = True)
data['Position'].fillna('ST', inplace = True)
data['Club'].fillna('No Club', inplace = True)
data['Work Rate'].fillna('Medium/ Medium', inplace = True)
data['Skill Moves'].fillna(data['Skill Moves'].median(), inplace = True)
data['Weak Foot'].fillna(3, inplace = True)
data['Preferred Foot'].fillna('Right', inplace = True)
data['International Reputation'].fillna(1, inplace = True)
data['Wage'].fillna('â‚¬200K', inplace = True)

pd.set_option('max_rows', 100)
data.isnull().sum()

# impute with 0 for rest of the columns
data.fillna(0, inplace = True)

# lets check whether the data still has any missing values
data.isnull().sum().sum()

"""# **Feature Engineering**"""

# creating new features by aggregating the features

def defending(data):
    return int(round((data[['Marking', 'StandingTackle', 
                               'SlidingTackle']].mean()).mean()))
def general(data):
    return int(round((data[['HeadingAccuracy', 'Dribbling', 'Curve', 
                               'BallControl']].mean()).mean()))
def mental(data):
    return int(round((data[['Aggression', 'Interceptions', 'Positioning', 
                               'Vision','Composure']].mean()).mean()))
def passing(data):
    return int(round((data[['Crossing', 'ShortPassing', 
                               'LongPassing']].mean()).mean()))
def mobility(data):
    return int(round((data[['Acceleration', 'SprintSpeed', 
                               'Agility','Reactions']].mean()).mean()))
def power(data):
    return int(round((data[['Balance', 'Jumping', 'Stamina', 
                               'Strength']].mean()).mean()))
def rating(data):
    return int(round((data[['Potential', 'Overall']].mean()).mean()))

def shooting(data):
    return int(round((data[['Finishing', 'Volleys', 'FKAccuracy', 
                               'ShotPower','LongShots', 'Penalties']].mean()).mean()))

#adding these categories to the data

data['Defending'] = data.apply(defending, axis = 1)
data['General'] = data.apply(general, axis = 1)
data['Mental'] = data.apply(mental, axis = 1)
data['Passing'] = data.apply(passing, axis = 1)
data['Mobility'] = data.apply(mobility, axis = 1)
data['Power'] = data.apply(power, axis = 1)
data['Rating'] = data.apply(rating, axis = 1)
data['Shooting'] = data.apply(shooting, axis = 1)

# lets check the column names in the data after adding new features
data.columns

"""# **Data Visualization**

### **The Distribution of Scores of Different Skills**
"""

#Check the Distribution of Scores of Different Skills

plt.rcParams['figure.figsize'] = (15, 12)

plt.subplot(2, 4, 1)
sns.distplot(data['Defending'], color = 'red')
plt.grid()

plt.subplot(2, 4 ,2)
sns.distplot(data['General'], color = 'pink')
plt.grid()

plt.subplot(2, 4, 3)
sns.distplot(data['Mental'], color = 'blue')
plt.grid()

plt.subplot(2, 4, 4)
sns.distplot(data['Passing'], color = 'yellow')
plt.grid()

plt.subplot(2, 4, 5)
sns.distplot(data['Mobility'], color = 'green')
plt.grid()

plt.subplot(2, 4, 6)
sns.distplot(data['Power'], color = 'black')
plt.grid()

plt.subplot(2, 4, 7)
sns.distplot(data['Shooting'], color = 'purple')
plt.grid()

plt.subplot(2, 4, 8)
sns.distplot(data['Rating'], color = 'violet')
plt.grid()

plt.suptitle('Score Distribution for Different Abilities', fontsize= 21)
plt.show()

"""### **Comparison of preferret foot over the different players**"""

# Comparison pf preferred foot over the different players

plt.rcParams['figure.figsize'] = (8, 4)
sns.countplot(data['Preferred Foot'], palette = 'Oranges')
plt.title('Most Preferred Food of the Players', fontsize = 21)
plt.show

"""### **The Players with International  Reputation as 5 & 4**"""

#The Players with International Reputation as 5 & 4

labels = ['1', '2', '3', '4', '5']  #data['International Reputation'].index
sizes = data['International Reputation'].value_counts()
colors = plt.cm.copper(np.linspace(0, 1, 5))
explode = [0.1, 0.1, 0.2, 0.5, 0.9]

plt.rcParams['figure.figsize'] = (9, 9)
plt.pie(sizes, labels = labels, colors = colors, explode = explode, shadow = True,)
plt.title('International Repuatation for the Football Players', fontsize = 20)
plt.legend()
plt.show()

data['International Reputation'].value_counts()

data[data['International Reputation'] == 5][['Name','Nationality', 'Club', 'Release Clause','Overall']].sort_values(by = 'Overall', ascending = False).style.background_gradient(cmap = 'magma')

data[data['International Reputation'] == 4][['Name','Nationality','Club','Release Clause','Overall']].sort_values(by = 'Overall', ascending = False).style.background_gradient(cmap = 'magma')

"""### **Plotting a pie chart to represent the share of week foot players**"""

# plotting a pie chart to represent the share of week foot players

labels = ['5', '4', '3', '2', '1'] 
size = data['Weak Foot'].value_counts()
colors = plt.cm.Wistia(np.linspace(0, 1, 5))
explode = [0, 0, 0, 0, 0.1]

plt.pie(size, labels = labels, colors = colors, explode = explode, shadow = True, startangle = 90)
plt.title('Distribution of Week Foot among Players', fontsize = 21)
plt.legend()
plt.show()

"""### **Skill Moves of Players**"""

# Skill Moves of Players

plt.figure(figsize = (10, 6))
ax = sns.countplot(x = 'Skill Moves', data = data, palette = 'pastel')
ax.set_title(label = 'Count of players on Basis of their skill moves', fontsize = 20)
ax.set_xlabel(xlabel = 'Number of Skill Moves', fontsize = 16)
ax.set_ylabel(ylabel = 'Count', fontsize = 16)
plt.show()

data[(data['Skill Moves'] == 5.0) & (data['Age'] < 20)][['Name','Age']]

data[(data['Skill Moves'] == 5.0) & (data['Age'] < 30)][['Name','Age']]

# violin plot 

plt.rcParams['figure.figsize'] = (20, 7)
plt.style.use('seaborn-dark-palette')

sns.boxplot(data['Overall'], data['Age'], hue = data['Preferred Foot'], palette = 'Greys')
plt.title('Comparison of Overall Scores and age wrt Preferred foot', fontsize = 21)
plt.show()

# picking up the countries with highest number of players to compare their overall scores

data['Nationality'].value_counts().head(10).plot(kind = 'pie', cmap = 'inferno',
                                        startangle = 90, explode = [0, 0, 0, 0, 0, 0, 0, 0, 0.1, 0])
plt.title('Countries having Highest Number of players', fontsize = 15)
plt.axis('off')
plt.show()

data['Nationality'].value_counts()

# Every Nations' Player and their overall scores

some_countries = ('England', 'Germany', 'Spain', 'Argentina', 'France', 'Brazil', 'Italy', 'Columbia')
data_countries = data.loc[data['Nationality'].isin(some_countries) & data['Overall']]

plt.rcParams['figure.figsize'] = (15, 7)
ax = sns.barplot(x = data_countries['Nationality'], y = data_countries['Overall'], palette = 'Purples')
ax.set_xlabel(xlabel = 'Countries', fontsize = 9)
ax.set_ylabel(ylabel = 'Overall Scores', fontsize = 9)
ax.set_title(label = 'Distribution of overall scores of players from different countries', fontsize = 20)
plt.show()

some_clubs = ('CD LeganÃ©s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna DÃ¼sseldorf', 'Manchestar City',
             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')

data_clubs = data.loc[data['Club'].isin(some_clubs) & data['Overall']]

plt.rcParams['figure.figsize'] = (15, 8)
ax = sns.boxplot(x = data_clubs['Club'], y = data_clubs['Overall'], palette = 'inferno')
ax.set_xlabel(xlabel = 'Some Popular Clubs', fontsize = 9)
ax.set_ylabel(ylabel = 'Overall Score', fontsize = 9)
ax.set_title(label = 'Distribution of Overall Score in Different popular Clubs', fontsize = 20)
plt.xticks(rotation = 90)
plt.grid()
plt.show()

# Distribution of Ages in some Popular clubs

some_clubs = ('CD LeganÃ©s', 'Southampton', 'RC Celta', 'Empoli', 'Fortuna DÃ¼sseldorf', 'Manchestar City',
             'Tottenham Hotspur', 'FC Barcelona', 'Valencia CF', 'Chelsea', 'Real Madrid')

data_club = data.loc[data['Club'].isin(some_clubs) & data['Wage']]

plt.rcParams['figure.figsize'] = (15, 8)
ax = sns.boxenplot(x = 'Club', y = 'Age', data = data_club, palette = 'magma')
ax.set_xlabel(xlabel = 'Names of some popular Clubs', fontsize = 10)
ax.set_ylabel(ylabel = 'Distribution', fontsize = 10)
ax.set_title(label = 'Distribution of Ages in some Popular Clubs', fontsize = 20)
plt.xticks(rotation = 90)
plt.grid()
plt.show()

"""### **Best Players per each position with their age, club, and nationality based on their Overall Scores**"""

# best players per each position with their age, club, and nationality based on their overall scores

data.iloc[data.groupby(data['Position'])['Overall'].idxmax()][['Position', 'Name', 'Age', 'Club',
                             'Nationality','Overall']].sort_values(by = 'Overall',
                                        ascending = False).style.background_gradient(cmap = 'pink')

"""### **Finding 5 youngest Players from the dataset**"""

# finding 5 youngest Players from the dataset

youngest = data[data['Age'] == 16][['Name', 'Age', 'Club', 'Nationality', 'Overall']]
youngest.sort_values(by = 'Overall', ascending = False).head().style.background_gradient(cmap = 'magma')

"""### **15 Eldest Players from FIFA 2019**"""

# finding 15 eldest players from the dataset

data.sort_values('Age', ascending = False)[['Name', 'Age', 'Club',
                              'Nationality', 'Overall']].head(15).style.background_gradient(cmap = 'Wistia')

"""### **The longest membership in the club**"""

now = datetime.datetime.now()
data['Join_year'] = data.Joined.dropna().map(lambda x: x.split(',')[1].split(' ')[1])
data['Years_of_member'] = (data.Join_year.dropna().map(lambda x: now.year - int(x))).astype('int')
membership = data[['Name', 'Club', 'Years_of_member']].sort_values(by = 'Years_of_member', ascending = False).head(10)
membership.set_index('Name', inplace=True)
membership.style.background_gradient(cmap = 'Reds')

"""### **Top 10 Right footed footballers**"""

# Top 10 Right footed footballers

data[data['Preferred Foot'] == 'Right'][['Name', 'Age', 'Club',
                    'Nationality', 'Overall']].sort_values(by = 'Overall',
                            ascending = False).head(10).style.background_gradient(cmap = 'copper')

"""### **Top 10 left footed footballers**"""

# Top 10 left footed footballers

data[data['Preferred Foot'] == 'Left'][['Name', 'Age', 'Club',
         'Nationality', 'Overall']].sort_values(by = 'Overall',
            ascending = False).head(10).style.background_gradient(cmap = 'bone')